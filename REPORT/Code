#include <SoftwareSerial.h>
#include <TinyGPS++.h>

// Define software serial pins for GPS
const int RXPin = 6;
const int TXPin = 7;

// Create TinyGPS++ object
TinyGPSPlus gps;

// Create software serial object for GPS communication
SoftwareSerial gpsSerial(RXPin, TXPin);

// Sensor and output pins
#define LIGHT A0
#define MOIST A1
#define OBST 2
#define WATER 3
#define DARK 4
#define BUZZER 13

// Ultrasonic sensor pins
const int trigPin = 9;
const int echoPin = 10;

// Variables
long duration;
int distanceCm;
int sendmsg = 0;
char str[15];
int temp = 0, i = 0;

// Mobile number to send SMS
char mob_1[] = "+919175407509";

// Beep function
void beep() {
  digitalWrite(BUZZER, HIGH);
  delay(500);
  digitalWrite(BUZZER, LOW);
  delay(250);
}

void setup() {
  Serial.begin(9600);
  gpsSerial.begin(9600);

  pinMode(LIGHT, INPUT);
  pinMode(MOIST, INPUT);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(OBST, OUTPUT);
  pinMode(WATER, OUTPUT);
  pinMode(DARK, OUTPUT);
  pinMode(BUZZER, OUTPUT);

  digitalWrite(OBST, HIGH);
  digitalWrite(WATER, HIGH);
  digitalWrite(DARK, HIGH);

  // Check for light and beep
  if (digitalRead(LIGHT)) {
    beep();
    digitalWrite(DARK, LOW);
    delay(200);
    digitalWrite(DARK, HIGH);
  }

  // Initialize GSM Module
  Serial.println("AT");
  delay(1000);
  Serial.println("ATE0");
  delay(1000);
  Serial.println("AT+CNMI=2,2,0,0,0");
  delay(1000);
  Serial.println("AT+CMGF=1");
  delay(1000);
  Serial.println("AT+CMGD=0,4");
  delay(1000);
  Serial.println("AT&W");
  delay(1000);
}

void loop() {
  // GPS Data Handling
  while (gpsSerial.available() > 0) {
    if (gps.encode(gpsSerial.read())) {
      // GPS data processed
    }
  }

  if (millis() > 5000 && gps.charsProcessed() < 10) {
    Serial.println("No GPS detected");
    while (true);  // Halt
  }

  // Ultrasonic Sensor
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  distanceCm = duration * 0.034 / 2;

  // Obstacle detected
  if (distanceCm < 100) {
    beep();
    beep();
    digitalWrite(OBST, LOW);
    delay(200);
    digitalWrite(OBST, HIGH);
  }

  // Moisture detection
  if (!digitalRead(MOIST)) {
    beep();
    digitalWrite(WATER, LOW);
    delay(200);
    digitalWrite(WATER, HIGH);
  }

  // If no obstacle and soil is moist
  if (distanceCm >= 100 && digitalRead(MOIST)) {
    digitalWrite(WATER, HIGH);
    digitalWrite(OBST, HIGH);
    digitalWrite(DARK, HIGH);
  }

  // Button Pressed or Send Message Request
  if (digitalRead(OBST) == LOW || sendmsg == 1) {
    delay(500);
    if (digitalRead(OBST) == LOW || sendmsg == 1) {
      beep();
      Serial.print("AT+CMGS=\"");
      Serial.print(mob_1);
      Serial.println("\"");
      delay(500);
      Serial.print("My location is:\r\n");
      delay(500);
      Serial.print("http://www.google.com/maps/@");
      Serial.print(gps.location.lat(), 6);
      Serial.print(",");
      Serial.print(gps.location.lng(), 6);
      Serial.println(",299m/data=!3m1!1e3\r\n");
      delay(500);
      Serial.write(26);  // End of SMS
      delay(1000);
      sendmsg = 0;
    }
  }

  if (temp == 1) {
    check();
    temp = 0;
    i = 0;
  }

  delay(500);
  serialEvent();
  delay(1000);
}

// Check received message
void check() {
  if (strncmp(str, "LOC", 3) == 0) {
    sendmsg = 1;
  }
}

// Handle incoming serial commands
void serialEvent() {
  while (Serial.available() > 0) {
    if (Serial.find("#A.")) {
      // custom command if needed
    }
  }

  while (Serial.available()) {
    char inChar = Serial.read();
    str[i++] = inChar;
    if (inChar == '*') {
      temp = 1;
      return;
    }
  }
}

// Optional: Display GPS Info (not used now)
void displayInfo() {
  if (gps.location.isValid()) {
    Serial.print("Latitude: ");
    Serial.println(gps.location.lat(), 6);
    Serial.print("Longitude: ");
    Serial.println(gps.location.lng(), 6);
  } else {
    Serial.println("Location: Not Available");
  }
}
